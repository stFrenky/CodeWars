//1
//Очень просто, по заданному целому числу или числу с плавающей запятой найти его противоположность.
const opposite = number => number - number * 2;



// 2
// Создайте функцию, которая отвечает на вопрос «Вы играете на банджо?».
// Если ваше имя начинается с буквы «R» или строчной «r», вы играете на банджо!
// Функция принимает имя в качестве единственного аргумента и 
// возвращает одну из следующих строк:
// name + " plays banjo" 
// name + " does not play banjo"
const areYouPlayingBanjo = (name) =>
	name[0] === "r" || name[0] === "R" ? `${name} plays banjo` : `${name} does not play banjo`;



//3
// Напишите функцию для преобразования имени в инициалы. Это ката строго состоит из двух слов с одним пробелом между ними.
// На выходе должны быть две заглавные буквы с точкой, разделяющей их.
// Это должно выглядеть так:
// Сэм Харрис => SH
// Патрик Фини => P.F.
const abbrevName = name => name.split(" ").map(item => item[0].toUpperCase()).join(".");



//4
// Завершите функцию квадратной суммы, чтобы она возводила в квадрат каждое переданное ей число, а затем суммировала результаты.
// Например, для [1, 2, 2] он должен вернуть 9, потому что 1^2 + 2^2 + 2^2 = 9.
function squareSum(numbers) {
	return numbers.map((item) => item * item).reduce((acum, item) => acum + item, 0);
}



//5
// Это спин-офф моего первого ката.
// Вам дана строка, содержащая последовательность последовательностей символов, разделенных запятыми.
// Напишите функцию, которая возвращает новую строку, содержащую те же последовательности символов, кроме первой и последней, но на этот раз разделенные пробелами.
// Если входная строка пуста или удаление первого и последнего элементов приведет к тому, что результирующая строка будет пустой,
// верните пустое значение (представленное как универсальное значение NULL в приведенных ниже примерах).

//A
function array(arr) {

	let a = arr.split(',');

	if (a.length < 3 || a === null) {
		return null;
	} else {

		a.pop();
		a.shift();

		return a.join(' ');
	}
}

//B const array = arr => arr.split(',').slice(1, -1).join(' ') || null;



//6
// Вход: массив элементов
// ["ч", "о", "л", "а"]
// Вывод: Строка с разделенными запятыми элементами массива в том же порядке.
// "ч, о, л, а"
function printArray(array) {
	return array.join();
}



//7
// Ваша задача — создать функцию, которая выполняет четыре основные математические операции.
// Функция должна принимать три аргумента - операция(строка/символ), значение1(число), значение2(число).
// Функция должна возвращать числовой результат после применения выбранной операции.
function basicOp(operation, value1, value2) {
	const obj = {
		'+': value1 + value2,
		'-': value1 - value2,
		'*': value1 * value2,
		'/': value1 / value2,
	}
	return obj[operation];
}



//8
// Создайте функцию, которая будет возвращать оператор приветствия, использующий ввод;
//  ваша программа должна вернуть "Привет, <имя>, как дела сегодня?".
// [Убедитесь, что вы вводите именно то, что я написал, иначе программа может работать неправильно]
const greet = name => `Hello, ${name} how are you doing today?`;



//9
// Просто удалите пробелы из строки, затем верните результирующую строку.
const noSpace = x => x.split(' ').join('');



//10
// Код так быстро, как вы можете! Вам нужно удвоить целое число и вернуть его.
const doubleInteger = i => i * 2;



//11
// Завершите решение так, чтобы оно перевернуло переданную в него строку.
function solution(str) {
	return str.split('').reverse().join('');
}



//12
// Учитывая непустой массив целых чисел, вернуть результат умножения значений вместе по порядку. Пример:
const grow = x => x.reduce((sum, item) => sum * item);





