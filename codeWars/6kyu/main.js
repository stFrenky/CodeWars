//1
// Учитывая n, возьмите сумму цифр n. Если это значение содержит более одной цифры,
// продолжайте уменьшать таким образом, пока не будет получено однозначное число.
// Входным значением будет неотрицательное целое число.

// Примеры
// 16 --> 1 + 6 = 7
// 942 --> 9 + 4 + 2 = 15 --> 1 + 5 = 6
// 132189 --> 1 + 3 + 2 + 1 + 8 + 9 = 24 --> 2 + 4 = 6
// 493193 --> 4 + 9 + 3 + 1 + 9 + 3 = 29 --> 2 + 9 = 11 --> 1 + 1 = 2
function digitalRoot(n) {

	let sum = n.toString().split('').reduce((acum, item) => acum + +item, 0);

	if (sum >= 10) {
		return digitalRoot(sum);

	} else {
		return sum;

	}
}



//2
// Создайте функцию prefill, которая возвращает массив из n элементов,
// имеющих одинаковое значение v. Посмотрите, сможете ли вы сделать это без использования цикла.

// Вы должны подтвердить ввод:

// v может быть любым (примитивным или нет)
// если v опущен, заполните массив неопределенным
// если n равно 0, вернуть пустой массив
// если n не является целым числом или строкой в ​​целочисленном формате (например, '123'),
// которая > 0, генерируется TypeError
// При выдаче TypeError сообщение должно быть n is invalid,
// где вы заменяете n фактическим значением, переданным функции.
function prefill(n, v) {

	if (n === 0) {
		return [];

	}

	if (!Number.isInteger(+n) || isNaN(n - 1) || !isFinite(n) || n < 0 || typeof (n) === 'boolean') {
		throw new TypeError(`${n} is invalid`);

	} else {
		const arr = [];

		arr.length = n;

		arr.fill(v, 0, n);

		return arr;

	}
}



//3
// Для двух массивов a и b напишите функцию comp(a, b) (orcompSame(a, b)), которая проверяет, 
// имеют ли два массива «одинаковые» элементы с одинаковыми кратностями (кратность члена — это число раз появляется).
// «То же самое» здесь означает, что элементы в b являются элементами в квадрате, независимо от порядка.
function comp(array1, array2) {
	if (array1 === null || array2 === null) {
		return false;

	}

	const c = array1.map(item => item ** 2);

	return JSON.stringify(c.sort()) === JSON.stringify(array2.sort());

}




